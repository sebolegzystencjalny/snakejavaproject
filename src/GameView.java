import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.SwingUtilities;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 * Klasa reprezentująca widok gry.
 */
public class GameView extends javax.swing.JPanel implements ActionListener{
    private GameBoard gameBoard;
    private TreeMap<Integer, Integer> scores;
     DefaultListModel<String> listModel;
    final Timer timer = new Timer(150, this);
    
    /**
     * Tworzy nowy obiekt GameView.
     */
    public GameView() {
        initComponents();
        gameBoard = new GameBoard();
        jPanel1.add(gameBoard);
        listModel = new DefaultListModel<>();
        listModel.addElement(null);
        jList1.setModel(listModel);
    }
    
    /**
     * Dodaje wciśnięty klawisz do listy wciśniętych klawiszy.
     *
     * @param key Kod wciśniętego klawisza.
     */
    public void addInput(int key){
        gameBoard.addInput(key);
    }
    
    /**
     * Inicjalizuje grę.
     */
    public void initialize(){
        gameBoard.initiateGame();
        timer.stop();
    }
    
    /**
     * Inicjalizuje grę z określoną liczbą węży, jedzenia i żab.
     *
     * @param snakes Liczba węży.
     * @param food   Liczba jedzenia.
     * @param frogs  Liczba żab.
     */
    public void initialize(int snakes,int food,int frogs){
        gameBoard.initiateGame(snakes, food, frogs);
        timer.start();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jList1 = new javax.swing.JList<>();

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setMinimumSize(new java.awt.Dimension(800, 500));
        jPanel1.setName(""); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 500));
        jPanel1.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.gridheight = 5;
        add(jPanel1, gridBagConstraints);

        jPanel2.setMinimumSize(new java.awt.Dimension(150, 500));
        jPanel2.setName(""); // NOI18N
        jPanel2.setPreferredSize(new java.awt.Dimension(150, 500));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jButton1.setText("return to menu");
        jButton1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1, java.awt.BorderLayout.SOUTH);

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jPanel2.add(jList1, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 5;
        add(jPanel2, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Metoda wywoływana po naciśnięciu przycisku "return to menu".
     *
     * @param evt Obiekt zdarzenia akcji.
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        SnakeGame topFrame = (SnakeGame) SwingUtilities.getWindowAncestor(this);
        topFrame.returnToMenu();
    }//GEN-LAST:event_jButton1ActionPerformed
     /**
     * Metoda wywoływana przez timer w określonych odstępach czasowych.
     *
     * @param e Obiekt zdarzenia akcji.
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        scores = gameBoard.getScores();
        gameBoard.actionPerformed(e);  
        int bestScore = 0;
        List<Map.Entry<Integer, Integer>> sortedEntries = new ArrayList<>(scores.entrySet());
        Collections.sort(sortedEntries, Collections.reverseOrder(Map.Entry.comparingByValue()));
        if(gameBoard.isGame()){
            Map.Entry<Integer, Integer> highestEntry = sortedEntries.get(0);
            int highestScore = highestEntry.getValue();
            saveBestScore(highestScore);
            String[] entryArray = sortedEntries.stream()
                    .map(entry -> entry.getKey() + " snake: " + entry.getValue())
                    .toArray(String[]::new);

            listModel.clear();
            for (String item : entryArray) {
                listModel.addElement(item);
            }
        }
    }
    /**
     * Zapisuje najlepszy wynik do pliku.
     *
     * @param newScore Nowy wynik do zapisania.
     */
    public static void saveBestScore(int newScore) {
        String FILE_PATH = "best_score.txt";
        try {
            File file = new File(FILE_PATH);

            // Create the file if it doesn't exist
            if (!file.exists()) {
                file.createNewFile();
            }

            // Read the current best score from the file
            BufferedReader reader = new BufferedReader(new FileReader(file));
            String line = reader.readLine();
            int bestScore = 0;
            if (line != null) {
                bestScore = Integer.parseInt(line);
            }
            reader.close();

            // Compare with the new score and save it if it's better
            if (newScore > bestScore) {
                BufferedWriter writer = new BufferedWriter(new FileWriter(file));
                writer.write(Integer.toString(newScore));
                writer.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
